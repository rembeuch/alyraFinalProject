import Head from 'next/head'
import Image from 'next/image'
import Layout from '@/components/Layout/Layout'
import { useAccount, useSigner, useProvider } from 'wagmi'
import { Text, Flex, Button, Card } from '@chakra-ui/react'
import {
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
} from '@chakra-ui/react'
import { useEffect, useState } from 'react'
import { ethers } from 'ethers'
import { contractAddress, abi } from "../public/constants"
import Link from 'next/link';


export default function Collection() {

  const [nftList, setNftList] = useState([]);
  const [uri, setUri] = useState([]);


  const { address, isConnected } = useAccount()
  const provider = useProvider()
  const { data: signer } = useSigner()
  const [price, setPrice] = useState(0.01);

  const handleChange = (event) => {
    setPrice(event.target.value);
  };

  async function fetchNfts() {
    if (isConnected) {
      const contract = new ethers.Contract(contractAddress, abi, signer)
      const nfts = await contract.getMyNFTs();

      setNftList(nfts);
    }
  }

  useEffect(() => {
    fetchNfts();
    getUrl()
  }, [address, nftList]);

  async function setForSale(id, price) {
    if (isConnected) {
      const contract = new ethers.Contract(contractAddress, abi, signer)
      await contract.setForSale(parseInt(id), price);
    }
  }

  async function unSale(id) {
    if (isConnected) {
      const contract = new ethers.Contract(contractAddress, abi, signer)
      await contract.unSale(parseInt(id));
    }
  }

  async function getUrl() {
    if (isConnected) {
      const contract = new ethers.Contract(contractAddress, abi, signer)
      const url = []
      for (let i = 0; i < nftList.length; i++) {
        let uri = await contract.tokenURI(nftList[i][4])
        url.push(uri);
      }
      setUri(url)
    }
  }


  return (
    <>
      <Head>
        <title>Punk Hazard Land : Collection</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        {isConnected ? (
          <div className="App">
            <h1>My NFTs</h1>
            {nftList.map((nft, index) => (
              < div key={nft[4]} >
                < Image src={uri[index]} alt="img" width={400} height={400} style={{ margin: 10 }} />
                <Card style={{ margin: 20, padding: 10, border: `10px solid ${nft[1] ? "green" : "red"}` }} key={nft[4]}>
                  id#{nft[4]}
                  <p>Token location: {nft[0]}</p>

                  {address != nft[3] ?
                    <p> owner: 0x...{nft[3].slice(-4)}</p>
                    : <div className="text-emerald-700">You are the owner of this NFT</div>
                  }
                  <p>Token for Sale: {nft[1].toString()}
                    {nft[1] == false ? (
                      <div>
                        <input
                          style={{ border: "1px solid black" }}
                          type="number"
                          step="0.01"
                          min="0.01"
                          value={price}
                          onChange={handleChange}
                        />

                        <Button style={{
                          color: "#F9DC5C",
                          backgroundColor: "green",
                          padding: 10,
                          margin: 10,
                          transition: "background-color 0.3s ease",
                          borderRadius: 5,
                          textDecoration: "none"
                        }} onClick={() => setForSale(nft[4], price * 100)}>Set ForSale</Button>
                      </div>) :
                      (<Button style={{
                        color: "#F9DC5C",
                        backgroundColor: "red",
                        padding: 10,
                        margin: 10,
                        transition: "background-color 0.3s ease",
                        borderRadius: 5,
                        textDecoration: "none"
                      }} onClick={() => unSale(nft[4])}>Set UnSale</Button>)}
                  </p>
                </Card>
                <p>Token Price: {ethers.utils.formatEther(nft[2].toString())} eth</p>
                <hr></hr>
              </div>
            ))}
          </div>
        ) : (
          <Alert status='warning' width="50%">
            <AlertIcon />
            Please, connect your Wallet!
          </Alert>
        )}
      </Layout>
    </>
  )
}
