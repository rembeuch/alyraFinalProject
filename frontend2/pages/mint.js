import Head from 'next/head'
import Image from 'next/image'
import { useRouter } from 'next/router'
import Layout from '@/components/Layout/Layout'
import { useAccount, useSigner, useProvider } from 'wagmi'
import { Text, Flex, Button, Input, useToast } from '@chakra-ui/react'
import {
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
} from '@chakra-ui/react'
import { useEffect, useState } from 'react'
import { ethers } from 'ethers'
import { contractAddress, abi } from "../public/constants"
export default function Mint() {

  const { address, isConnected } = useAccount()
  const { data: signer } = useSigner()
  const provider = useProvider()
  const toast = useToast()
  const router = useRouter()
  const [ice, setIce] = useState({});
  const [fire, setFire] = useState({});
  const [iceNumber, setIceNumber] = useState(1);



  useEffect(() => {
    getTokenInfo(0)
    getTokenInfo(1)

  }, [isConnected]);

  const getTokenInfo = async (id) => {
    if (isConnected) {
      const contract = new ethers.Contract(contractAddress, abi, provider)
      const info = await contract.tokenInfo(id)

      if (id === 0)
        setIce(info);
      if (id === 1)
        setFire(info);
    }
  }

  const Mint = async (id, number) => {
    const contract = new ethers.Contract(contractAddress, abi, signer)
    try {
      await contract.mint(id, number, { value: ethers.utils.parseEther(`${0.05 * number}`) })
      // router.push('/getNumber')
      toast({
        title: 'Congratulations',
        description: `You Mint ${number} Land!`,
        status: 'success',
        duration: 9000,
        isClosable: true,
      })
    }
    catch (e) {
      toast({
        title: 'Error',
        description: e.reason,
        status: 'error',
        duration: 9000,
        isClosable: true,
      })
    }
    getTokenInfo(id)
  }


  function overSupply(token) {
    if (String(token.totalSupply) === String(token.maxSupply))
      return true
  }

  const handleIncrementIce = () => {
    setIceNumber(iceNumber + 1);
  };

  const handleDecrementIce = () => {
    if (iceNumber > 1) {
      setIceNumber(iceNumber - 1);
    }
  };

  return (
    <>
      <Head>
        <title>Punk Hazard Land: Mint</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        {isConnected ? (
          <Flex alignItems="center">
            <div align="center" style={{ margin: 10 }}>
              <Image src="/img0.jpg" alt="img" width={400} height={400} style={{ margin: 10 }} />
              <div>
                <Button onClick={handleDecrementIce}>-</Button>
                <span>{iceNumber}</span>
                <Button onClick={handleIncrementIce}>+</Button>
              </div>
              {overSupply(ice) ? "All the Land of this type have been minted!" :
                <Button colorScheme='blue' onClick={() => Mint(0, iceNumber)}>Mint an Ice Land</Button>
              }
              <br></br>
              Minted: {String(ice.totalSupply)} / {String(ice.maxSupply)}
            </div>
            <div align="center" style={{ margin: 10 }}>
              <Image src="/img1.jpg" alt="img" width={400} height={400} style={{ margin: 10 }} />
              {overSupply(fire) ? "All the Land of this type have been minted!" :
                <Button colorScheme='red' onClick={() => Mint(1)}>Mint a Fire Land</Button>
              }
              <br></br>
              Minted: {String(fire.totalSupply)} / {String(fire.maxSupply)}
            </div>

          </Flex>
        ) : (
          <Alert status='warning' width="50%">
            <AlertIcon />
            Please, connect your Wallet.
          </Alert>
        )}
      </Layout>
    </>
  )
}
